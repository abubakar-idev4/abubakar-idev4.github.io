{"version":3,"sources":["webpack:///./src/app/pages/report/AuthGuard.service.ts","webpack:///./src/app/pages/report/account-ledger/account-ledger.component.css","webpack:///./src/app/pages/report/account-ledger/account-ledger.component.html","webpack:///./src/app/pages/report/account-ledger/account-ledger.component.ts","webpack:///./src/app/pages/report/due-recovery/due-recovery.component.css","webpack:///./src/app/pages/report/due-recovery/due-recovery.component.html","webpack:///./src/app/pages/report/due-recovery/due-recovery.component.ts"],"names":[],"mappings":"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","file":"operations-operations-module~pages-report-report-module.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { Auth } from \"../../shared/models/Auth.model\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private toaster: ToastrService) { }\r\n  auth: Auth;\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    this.auth = JSON.parse(sessionStorage.getItem(\"auth\"));\r\n    let b = false;\r\n    this.auth.modules.forEach(screen => {\r\n      if (screen.modUrl.indexOf(\"reports\") >= 0) {\r\n        b= true;\r\n      }\r\n    })\r\n    if(!b)\r\n      this.toaster.error(\"Permission Denied\");\r\n    // ('Please Login to Continue');?\r\n    return b;\r\n  }\r\n}","module.exports = \"/* .ng-select.custom {\\r\\n    border:0px;\\r\\n    min-height: 0px;\\r\\n    border-radius: 0;\\r\\n    width:100%;\\r\\n}\\r\\n.ng-select.custom .ng-select-container  {            \\r\\n    min-height: 0px;\\r\\n    border-radius: 0;\\r\\n    width:100%;\\r\\n} */\\r\\n/* .ng-dropdown-panel{\\r\\n    width:200px !important;\\r\\n} */\\r\\n.ng-dropdown-panel {\\r\\n    min-width: 120% !important;\\r\\n}\"","module.exports = \"<main class=\\\"main\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-3\\\">\\r\\n        <app-reports-leftside-bar></app-reports-leftside-bar>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-9\\\">\\r\\n        <div class=\\\"content mb-md-5\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"mysearchbox\\\">\\r\\n                <h6 class=\\\"d-inline-block searchshow\\\">Accounts Ledger <i class=\\\"fa fa-print\\\"> </i></h6>\\r\\n                <div class=\\\"mysearch\\\">\\r\\n                  <a href=\\\"#.\\\" class=\\\"remove-search\\\"><i class=\\\"fa fa-window-close\\\"> </i></a>\\r\\n                  <input type=\\\"text\\\" id=\\\"myInput\\\" onkeyup=\\\"myFunction()\\\" placeholder=\\\"Search by Name...\\\"\\r\\n                    title=\\\"Type in a name\\\">\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <form [formGroup]=\\\"ngForm\\\" (ngSubmit)=\\\"printReport()\\\">\\r\\n              <div class=\\\"cRow\\\">\\r\\n                <!-- <div style=\\\"min-width: {{GlAccounts.length}}% !important;\\\">ABC</div> -->\\r\\n                <!-- <ng-select  class=\\\"custom\\\" autoCorrect [items]=\\\"GlAccounts\\\" required required bindLabel=\\\"desc\\\" bindValue=\\\"accNum\\\"\\r\\n                    name=\\\"glMapping\\\" placeholder=\\\"Select GL Account Mapping\\\" formControlName=\\\"account\\\">\\r\\n                  </ng-select> -->\\r\\n                <div class=\\\"cCol6\\\">\\r\\n\\r\\n                  <input *ngIf=\\\"auth.role == 'bdo' || auth.role == 'bm'\\\" type=\\\"hidden\\\" formControlName=\\\"branch\\\"\\r\\n                    readonly />\\r\\n\\r\\n                  <!-- <mat-form-field *ngIf=\\\"auth.role != 'bdo' && auth.role != 'bm'\\\">\\r\\n                    <mat-select placeholder=\\\"Branch\\\" formControlName=\\\"branch\\\"\\r\\n                      (selectionChange)=\\\"onBranchSelectionChange($event)\\\">\\r\\n                      <mat-option *ngFor=\\\"let b of branchs\\\" [value]=\\\"b.brnchSeq\\\">\\r\\n                        {{b.brnchNm}}\\r\\n                      </mat-option>\\r\\n                    </mat-select>\\r\\n                  </mat-form-field> -->\\r\\n\\r\\n                  <ng-select *ngIf=\\\"auth.role != 'bdo' && auth.role != 'bm'\\\"\\r\\n                    (change)=\\\"onBranchSelectionChange($event)\\\" [items]=\\\"branchs\\\" required bindLabel=\\\"brnchNm\\\"\\r\\n                    bindValue=\\\"brnchSeq\\\" name=\\\"brnchNm\\\" placeholder=\\\"Select Branch:\\\" formControlName=\\\"branch\\\">\\r\\n                  </ng-select>\\r\\n\\r\\n\\r\\n                  <ng-select [ngStyle]=\\\"getStyleList()\\\" class=\\\"custom\\\" autoCorrect [items]=\\\"GlAccounts\\\" required\\r\\n                    required bindLabel=\\\"accDesc\\\" bindValue=\\\"accNum\\\" name=\\\"glMapping\\\"\\r\\n                    placeholder=\\\"Select GL Account Mapping\\\" formControlName=\\\"account\\\">\\r\\n                  </ng-select>\\r\\n\\r\\n\\r\\n                  <mat-form-field>\\r\\n                    <input matInput required formControlName=\\\"frmDt\\\" [max]=\\\"maxDate\\\" placeholder=\\\"From Date:\\\"\\r\\n                      [matDatepicker]=\\\"picker1\\\" disabled readonly />\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker required #picker1 disabled=\\\"false\\\"></mat-datepicker>\\r\\n                  </mat-form-field>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput required formControlName=\\\"toDt\\\" [max]=\\\"maxDate\\\" placeholder=\\\"To Date:\\\"\\r\\n                      [matDatepicker]=\\\"picker2\\\" disabled readonly />\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker required #picker2 disabled=\\\"false\\\"></mat-datepicker>\\r\\n                  </mat-form-field>\\r\\n\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"modal-footer text-center\\\">\\r\\n                <button [disabled]=\\\"!ngForm.valid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Print</button>\\r\\n\\r\\n              </div>\\r\\n\\r\\n            </form>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</main>\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ReportsService } from 'src/app/shared/services/reports.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport * as _moment from 'moment';\r\n// tslint:disable-next-line:no-duplicate-imports\r\n// import {default as _rollupMoment} from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { ProductService } from 'src/app/shared/services/product.service';\r\nimport { Auth } from 'src/app/shared/models/Auth.model';\r\nimport { Branch } from 'src/app/shared/models/branch.model';\r\nimport { TransfersService } from 'src/app/shared/services/transfers.service';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ToastrService } from 'ngx-toastr';\r\nconst moment = _moment;\r\n\r\nexport const MY_FORMATS = {\r\n  parse: {\r\n    dateInput: 'LL',\r\n  },\r\n  display: {\r\n    dateInput: 'DD/MM/YYYY',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n\r\n@Component({\r\n  selector: 'app-account-ledger',\r\n  templateUrl: './account-ledger.component.html',\r\n  styleUrls: ['./account-ledger.component.css'],\r\n  providers: [\r\n    // `MomentDateAdapter` can be automatically provided by importing `MomentDateModule` in your\r\n    // application's root module. We provide it at the component level here, due to limitations of\r\n    // our example generation script.\r\n    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },\r\n\r\n    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },\r\n  ],\r\n})\r\nexport class AccountLedgerComponent implements OnInit {\r\n  auth: Auth = JSON.parse(sessionStorage.getItem('auth'));\r\n  ngForm: FormGroup;\r\n  maxDate: Date;\r\n  GlAccounts: any[] = [];\r\n  branchs: Branch[];\r\n\r\n  constructor(private fb: FormBuilder, private toaster: ToastrService, private reportsService: ReportsService, private productService: ProductService, private transfersService: TransfersService, private spinner: NgxSpinnerService) {\r\n    this.maxDate = new Date();\r\n    this.ngForm = this.fb.group({\r\n      frmDt: [new Date(), Validators.required],\r\n      toDt: [new Date(), Validators.required],\r\n      account: ['', Validators.required],\r\n      branch: [''],\r\n    });\r\n\r\n    if (this.auth.role == \"bm\" || this.auth.role == \"bdo\") {\r\n      this.ngForm = this.fb.group({\r\n        frmDt: [new Date(), Validators.required],\r\n        toDt: [new Date(), Validators.required],\r\n        account: ['', Validators.required],\r\n        branch: [{ value: this.auth.emp_branch, disabled: false }, Validators.required],\r\n      });\r\n    } else {\r\n      this.transfersService.getBranches().subscribe(d => {\r\n        console.log(d)\r\n        this.branchs = d;\r\n      }\r\n      );\r\n      this.ngForm = this.fb.group({\r\n        frmDt: [new Date(), Validators.required],\r\n        toDt: [new Date(), Validators.required],\r\n        account: ['', Validators.required],\r\n        branch: [''],\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.productService.getGlAccounts().subscribe(res => {\r\n      console.log(res);\r\n      this.GlAccounts = res;\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n  printReport() {\r\n    this.spinner.show();\r\n    this.reportsService.printAccountLedger(this.ngForm.value).subscribe((response) => {\r\n      this.spinner.hide();\r\n      var binaryData = [];\r\n      binaryData.push(response);\r\n      var fileURL = window.URL.createObjectURL(new Blob(binaryData, { type: \"application/pdf\" }));\r\n      window.open(fileURL, '_blank');\r\n    }, (error) => {\r\n      this.spinner.hide();\r\n      if (error.status == 500) {\r\n        this.toaster.error(\"Something Went Wrong\", \"Error\");\r\n      } else if (error) {\r\n        this.toaster.error(\"Something Went Wrong\", \"Error\")\r\n      }\r\n    });\r\n  }\r\n\r\n  get f() { return this.ngForm.controls; }\r\n  maxVal = 0;\r\n  getStyleList() {\r\n    this.GlAccounts.forEach(acc => {\r\n      if (acc.accDesc.length > this.maxVal) {\r\n        this.maxVal = acc.accDesc.length;\r\n      }\r\n    })\r\n    // console.log({'display':'block', 'width': this.maxVal*10+'px !important'})\r\n    return { 'display': 'block', 'width': this.maxVal * 0.75 + 'em' };\r\n  }\r\n\r\n  onBranchSelectionChange(e) {\r\n    this.spinner.show();\r\n    this.productService.getGlAccountsForAccountLedger(this.ngForm.controls['branch'].value).subscribe(res => {\r\n      this.spinner.hide();\r\n      console.log(res);\r\n      this.GlAccounts = res;\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<main class=\\\"main\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-3\\\">\\r\\n        <app-reports-leftside-bar></app-reports-leftside-bar>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-9\\\">\\r\\n        <div class=\\\"content mb-md-5\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"mysearchbox\\\">\\r\\n                <h6 class=\\\"d-inline-block searchshow\\\">Due Recovery <i class=\\\"fa fa-print\\\"> </i></h6>\\r\\n                <div class=\\\"mysearch\\\">\\r\\n                  <a href=\\\"#.\\\" class=\\\"remove-search\\\"><i class=\\\"fa fa-window-close\\\"> </i></a>\\r\\n                  <input type=\\\"text\\\" id=\\\"myInput\\\" onkeyup=\\\"myFunction()\\\" placeholder=\\\"Search by Name...\\\"\\r\\n                    title=\\\"Type in a name\\\">\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <form class=\\\"md-float-material\\\" [formGroup]=\\\"ngForm\\\" (ngSubmit)=\\\"printReport()\\\">\\r\\n              <div class=\\\"cRow\\\">\\r\\n                <div class=\\\"cCol3\\\">\\r\\n                  <input *ngIf=\\\"auth.role != 'admin'\\\" type=\\\"hidden\\\" formControlName=\\\"branch\\\" readonly />\\r\\n\\r\\n\\r\\n                  <!-- <mat-form-field *ngIf=\\\"auth.role == 'admin'\\\">\\r\\n                      <mat-select placeholder=\\\"Branch\\\" formControlName=\\\"branch\\\">\\r\\n                        <mat-option *ngFor=\\\"let b of branchs\\\" [value]=\\\"b.brnchSeq\\\">\\r\\n                          {{b.brnchNm}}\\r\\n                        </mat-option>\\r\\n                      </mat-select>\\r\\n                    </mat-form-field> -->\\r\\n\\r\\n\\r\\n                  <ng-select *ngIf=\\\"auth.role != 'bdo' && auth.role != 'bm'\\\" [items]=\\\"branchs\\\" required\\r\\n                    bindLabel=\\\"brnchNm\\\" bindValue=\\\"brnchSeq\\\" name=\\\"brnchNm\\\" placeholder=\\\"Select Branch:\\\"\\r\\n                    formControlName=\\\"branch\\\">\\r\\n                  </ng-select>\\r\\n\\r\\n                  <mat-form-field>\\r\\n                    <input matInput required formControlName=\\\"frmDt\\\" placeholder=\\\"From Date:\\\" [matDatepicker]=\\\"picker1\\\"\\r\\n                      disabled readonly />\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker required #picker1 disabled=\\\"false\\\"></mat-datepicker>\\r\\n                  </mat-form-field>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput required formControlName=\\\"toDt\\\" placeholder=\\\"To Date:\\\" [matDatepicker]=\\\"picker2\\\"\\r\\n                      disabled readonly />\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker required #picker2 disabled=\\\"false\\\"></mat-datepicker>\\r\\n                  </mat-form-field>\\r\\n\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"modal-footer\\\">\\r\\n                <button [disabled]=\\\"!ngForm.valid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Print</button>\\r\\n\\r\\n              </div>\\r\\n\\r\\n            </form>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</main>\"","import { Component, OnInit } from '@angular/core';\r\nimport * as _moment from 'moment';\r\n// tslint:disable-next-line:no-duplicate-imports\r\n// import {default as _rollupMoment} from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { MAT_DATE_FORMATS, MAT_DATE_LOCALE, DateAdapter } from '@angular/material';\r\nimport { RecoveryService } from 'src/app/shared/services/recovery.service';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ReportsService } from 'src/app/shared/services/reports.service';\r\nimport { Auth } from 'src/app/shared/models/Auth.model';\r\nimport { TransfersService } from 'src/app/shared/services/transfers.service';\r\nimport { Branch } from 'src/app/shared/models/branch.model';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nconst moment = _moment;\r\n\r\nexport const MY_FORMATS = {\r\n  parse: {\r\n    dateInput: 'LL',\r\n  },\r\n  display: {\r\n    dateInput: 'DD/MM/YYYY',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n\r\n@Component({\r\n  selector: 'app-due-recovery',\r\n  templateUrl: './due-recovery.component.html',\r\n  styleUrls: ['./due-recovery.component.css'],\r\n  providers: [\r\n    // `MomentDateAdapter` can be automatically provided by importing `MomentDateModule` in your\r\n    // application's root module. We provide it at the component level here, due to limitations of\r\n    // our example generation script.\r\n    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },\r\n\r\n    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },\r\n  ]\r\n})\r\nexport class DueRecoveryComponent implements OnInit {\r\n  auth: Auth = JSON.parse(sessionStorage.getItem('auth'));\r\n  ngForm: FormGroup;\r\n  tempInstituteArray: any[] = [];\r\n  maxDate: Date;\r\n  branchs: Branch[];\r\n  constructor(private fb: FormBuilder,\r\n    private toaster: ToastrService, private reportsService: ReportsService, private recoveryService: RecoveryService, private transfersService: TransfersService, private spinner: NgxSpinnerService) {\r\n    this.maxDate = new Date();\r\n    if (this.auth.role == \"admin\") {\r\n      this.transfersService.getBranches().subscribe(d => { this.branchs = d; }\r\n      );\r\n\r\n      this.ngForm = this.fb.group({\r\n        frmDt: [new Date(), Validators.required],\r\n        toDt: [new Date(), Validators.required],\r\n        branch: ['', Validators.required],\r\n      });\r\n    } else {\r\n      this.ngForm = this.fb.group({\r\n        frmDt: [new Date(), Validators.required],\r\n        toDt: [new Date(), Validators.required],\r\n        branch: [{ value: this.auth.emp_branch, disabled: false }, Validators.required,],\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n  printReport() {\r\n    if (new Date(this.ngForm.controls['toDt'].value) < new Date(this.ngForm.controls['frmDt'].value)) {\r\n      this.toaster.error(\"From Date Can not be greater than To Date\");\r\n      return;\r\n    }\r\n    this.spinner.show();\r\n    this.reportsService.printDueRecovery(this.ngForm.value).subscribe((response) => {\r\n      this.spinner.hide();\r\n      var binaryData = [];\r\n      binaryData.push(response);\r\n      var fileURL = window.URL.createObjectURL(new Blob(binaryData, { type: \"application/pdf\" }));\r\n      window.open(fileURL, '_blank');\r\n    }, (error) => {\r\n      this.spinner.hide();\r\n      if (error.status == 500) {\r\n        this.toaster.error(\"Something Went Wrong\", \"Error\");\r\n      } else if (error) {\r\n        this.toaster.error(\"Something Went Wrong\", \"Error\")\r\n      }\r\n    });\r\n  }\r\n\r\n  get f() { return this.ngForm.controls; }\r\n\r\n}\r\n"],"sourceRoot":""}