{"version":3,"sources":["webpack:///./src/app/pages/report/compliance-repot/aml-report/aml-report.component.css","webpack:///./src/app/pages/report/compliance-repot/aml-report/aml-report.component.html","webpack:///./src/app/pages/report/compliance-repot/aml-report/aml-report.component.ts","webpack:///./src/app/pages/report/compliance-repot/cnic-expiry/cnic-expiry.component.css","webpack:///./src/app/pages/report/compliance-repot/cnic-expiry/cnic-expiry.component.html","webpack:///./src/app/pages/report/compliance-repot/cnic-expiry/cnic-expiry.component.ts","webpack:///./src/app/pages/report/compliance-repot/compliance-repot.module.ts"],"names":[],"mappings":"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","file":"compliance-repot-compliance-repot-module.js","sourcesContent":["module.exports = \"\"","module.exports = \"<div class=\\\"col-md-9\\\">\\r\\n  <div class=\\\"content mb-md-5\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-sm-8\\\">\\r\\n        <div class=\\\"mysearchbox\\\">\\r\\n          <h6 class=\\\"d-inline-block searchshow\\\">AML / NECTA Matches <i class=\\\"fa fa-print\\\"> </i></h6>\\r\\n          <div class=\\\"mysearch\\\">\\r\\n            <a href=\\\"#.\\\" class=\\\"remove-search\\\"><i class=\\\"fa fa-window-close\\\"> </i></a>\\r\\n            <input type=\\\"text\\\" id=\\\"myInput\\\" onkeyup=\\\"myFunction()\\\" placeholder=\\\"Search by Name...\\\"\\r\\n              title=\\\"Type in a name\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <form [formGroup]=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmitAmlReport()\\\">\\r\\n        <div class=\\\"cRow\\\">\\r\\n          <div class=\\\"cCol6\\\">\\r\\n\\r\\n            <!-- <mat-form-field>\\r\\n                <mat-select placeholder=\\\"Report Type\\\" formControlName=\\\"branch\\\">\\r\\n                  <mat-option *ngFor=\\\"let b of branchs\\\" [value]=\\\"b.brnchSeq\\\">\\r\\n                    {{b.brnchNm}}\\r\\n                  </mat-option>\\r\\n                </mat-select>\\r\\n              </mat-form-field> -->\\r\\n\\r\\n            <ng-select *ngIf=\\\"auth.role != 'bdo' && auth.role != 'bm'\\\" [items]=\\\"branchs\\\" required bindLabel=\\\"brnchNm\\\"\\r\\n              bindValue=\\\"brnchSeq\\\" name=\\\"brnchNm\\\" placeholder=\\\"Select Branch:\\\" formControlName=\\\"branch\\\">\\r\\n            </ng-select>\\r\\n\\r\\n            <mat-form-field>\\r\\n              <input matInput required formControlName=\\\"frmDt\\\" placeholder=\\\"From Date:\\\" [matDatepicker]=\\\"picker1\\\"\\r\\n                disabled readonly />\\r\\n              <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n              <mat-datepicker required #picker1 disabled=\\\"false\\\"></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field>\\r\\n              <input matInput required formControlName=\\\"toDt\\\" [min]=\\\"ngForm.controls['frmDt'].value\\\"\\r\\n                placeholder=\\\"To Date:\\\" [matDatepicker]=\\\"picker2\\\" disabled readonly />\\r\\n              <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n              <mat-datepicker required #picker2 disabled=\\\"false\\\"></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <!-- <mat-radio-group formControlName=\\\"isXls\\\">\\r\\n              <mat-radio-button value=\\\"1\\\">Excel </mat-radio-button>\\r\\n              <mat-radio-button class=\\\"ml-3\\\" checked value=\\\"0\\\">PDF </mat-radio-button>\\r\\n            </mat-radio-group> -->\\r\\n\\r\\n\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n          <button [disabled]=\\\"!ngForm.valid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Print</button>\\r\\n        </div>\\r\\n\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { MY_FORMATS } from 'src/app/pages/admin/loan-servicing/loan-servicing.component';\r\nimport { Auth } from 'src/app/shared/models/Auth.model';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Branch } from 'src/app/shared/models/branch.model';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { DataService } from 'src/app/shared/services/data.service';\r\nimport { TransfersService } from 'src/app/shared/services/transfers.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport * as _moment from 'moment';\r\nimport { ComplianceService } from 'src/app/shared/services/compliance.service';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n  selector: 'app-aml-report',\r\n  templateUrl: './aml-report.component.html',\r\n  styleUrls: ['./aml-report.component.css'],\r\n  providers: [{ provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },\r\n  { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }]\r\n})\r\nexport class AmlReportComponent implements OnInit {\r\n  ngForm: FormGroup;\r\n  frmDt: string;\r\n  toDt: string;\r\n  maxDate: Date;\r\n  branchs: Branch[];\r\n\r\n  auth = JSON.parse(sessionStorage.getItem(\"auth\"));\r\n  constructor(private fb: FormBuilder, private toaster: ToastrService, private complianceService: ComplianceService, private transfersService: TransfersService, private spinner: NgxSpinnerService) {\r\n    this.maxDate = new Date();\r\n    if (this.auth.role == \"admin\") {\r\n      this.transfersService.getBranches().subscribe(d => { this.branchs = d; }\r\n      );\r\n\r\n      this.ngForm = this.fb.group({\r\n        branch: ['', Validators.required],\r\n        frmDt: ['', Validators.required],\r\n        toDt: ['', Validators.required],\r\n        isXls: [0, Validators.required],\r\n      });\r\n    } else {\r\n      this.ngForm = this.fb.group({\r\n        frmDt: ['', Validators.required],\r\n        toDt: ['', Validators.required],\r\n        isXls: [0, Validators.required],\r\n        branch: [{ value: this.auth.emp_branch, disabled: false }, Validators.required,],\r\n      });\r\n    }\r\n    // this.ngForm = this.fb.group({\r\n    //   branch: ['', Validators.required],\r\n    //   frmDt: ['', Validators.required],\r\n    //   toDt: ['', Validators.required],\r\n    //   isXls:[0, Validators.required],\r\n    // });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.transfersService.getBranches().subscribe(d => {\r\n      this.branchs = d;\r\n    });\r\n  }\r\n\r\n  onSubmitAmlReport() {\r\n    this.spinner.show();\r\n    console.log(this.ngForm.controls['branch'].value);\r\n    const frmDt = new DatePipe('en-US').transform(this.ngForm.get('frmDt').value, 'dd-MM-yyyy')\r\n    const toDt = new DatePipe('en-US').transform(this.ngForm.get('toDt').value, 'dd-MM-yyyy')\r\n    let isXls: boolean = this.ngForm.get('isXls').value;\r\n    console.log(isXls);\r\n    this.complianceService.printAmlCompliaanceReport(frmDt, toDt, this.ngForm.controls['branch'].value, isXls).subscribe((response) => {\r\n      this.spinner.hide();\r\n      var binaryData = [];\r\n      binaryData.push(response);\r\n      let fileURL = \"\"\r\n      if (isXls == true) {\r\n        console.log(\"ex\");\r\n        fileURL = window.URL.createObjectURL(new Blob(binaryData, { type: \"application/vnd.ms-excel\" }));\r\n      }\r\n      else {\r\n        console.log(\"pdf\");\r\n        fileURL = window.URL.createObjectURL(new Blob(binaryData, { type: \"application/pdf\" }));\r\n      }\r\n\r\n      console.log(fileURL);\r\n\r\n      window.open(fileURL, '_blank');\r\n    }, (error) => {\r\n      this.spinner.hide();\r\n      if (error.status == 500) {\r\n        this.toaster.error(\"Something Went Wrong\", \"Error\");\r\n      } else if (error) {\r\n        this.toaster.error(\"Something Went Wrong\", \"Error\")\r\n      }\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"col-md-12\\\">\\r\\n  <div class=\\\"content\\\">\\r\\n    <div class=\\\"mysearchbox\\\">\\r\\n      <h6 class=\\\"d-inline-block searchshow\\\">CNIC Expiry</h6>\\r\\n      <div class=\\\"mysearch\\\"> <a href=\\\"#.\\\" class=\\\"remove-search\\\"><i class=\\\"fa fa-window-close\\\"> </i></a>\\r\\n        <input type=\\\"text\\\" id=\\\"myInput\\\" onkeyup=\\\"myFunction()\\\" placeholder=\\\"Search for names..\\\" title=\\\"Type in a name\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <form [formGroup]=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmitCnicExpiry()\\\">\\r\\n      <div class=\\\"row clearfix\\\">\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n          <!-- <input type=\\\"hidden\\\" formControlName=\\\"brnchSeq\\\" readonly /> -->\\r\\n\\r\\n          <!-- <div class=\\\"cRow\\\">\\r\\n            <div>\\r\\n              <mat-form-field>\\r\\n                <input matInput required formControlName=\\\"frmDt\\\" [max]=\\\"maxDate\\\" placeholder=\\\"From Date:\\\"\\r\\n                  [matDatepicker]=\\\"picker1\\\" disabled readonly />\\r\\n                <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker required #picker1 disabled=\\\"false\\\"></mat-datepicker>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n              <mat-form-field>\\r\\n                <input matInput required formControlName=\\\"toDt\\\" [min]=\\\"ngForm.controls['frmDt'].value\\\" [max]=\\\"maxDate\\\"\\r\\n                  placeholder=\\\"To Date:\\\" [matDatepicker]=\\\"picker2\\\" disabled readonly />\\r\\n                <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker required #picker2 disabled=\\\"false\\\"></mat-datepicker>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n\\r\\n              <mat-radio-group formControlName=\\\"isXls\\\">\\r\\n                <mat-radio-button value=true>Excel </mat-radio-button>\\r\\n                <mat-radio-button class=\\\"ml-3\\\" checked value=false>PDF </mat-radio-button>\\r\\n              </mat-radio-group>\\r\\n\\r\\n            </div>\\r\\n          </div> -->\\r\\n          <div class=\\\"buttons mt-3\\\">\\r\\n            <button [disabled]=\\\"!ngForm.valid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary btn-min mr-3\\\">Print CNIC\\r\\n              Expiry</button>\\r\\n\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { MY_FORMATS } from 'src/app/pages/admin/loan-servicing/loan-servicing.component';\r\nimport { Auth } from 'src/app/shared/models/Auth.model';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Branch } from 'src/app/shared/models/branch.model';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { DataService } from 'src/app/shared/services/data.service';\r\nimport { TransfersService } from 'src/app/shared/services/transfers.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport * as _moment from 'moment';\r\nimport { ComplianceService } from 'src/app/shared/services/compliance.service';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n  selector: 'app-cnic-expiry',\r\n  templateUrl: './cnic-expiry.component.html',\r\n  styleUrls: ['./cnic-expiry.component.css']\r\n})\r\nexport class CnicExpiryComponent implements OnInit {\r\n  auth: Auth = JSON.parse(sessionStorage.getItem('auth'));\r\n  rptFlag: any;\r\n  ngForm: FormGroup;\r\n  frmDt: string;\r\n  toDt: string;\r\n  maxDate: Date;\r\n  branchs: Branch[];\r\n  allBranches: Object;\r\n\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private toaster: ToastrService,\r\n    private spinner: NgxSpinnerService,\r\n    private dataService: DataService,\r\n    private transfersService: TransfersService,\r\n    private complianceService: ComplianceService,) {\r\n\r\n    this.maxDate = new Date();\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    console.log(this.auth)\r\n\r\n    this.ngForm = this.fb.group({\r\n      // toDt: [new FormControl(moment()), Validators.required],\r\n      // frmDt: [new FormControl(moment()), Validators.required],\r\n      // brnchSeq: [this.auth.emp_branch],\r\n      // isXls: [false],\r\n    });\r\n    this.transfersService.getBranches().subscribe(d => {\r\n      this.branchs = d;\r\n    });\r\n  }\r\n  getBranch() {\r\n    this.allBranches = [];\r\n    this.dataService.getBranch(this.ngForm.controls[\"areaSeq\"].value).subscribe(d => {\r\n      this.allBranches = d;\r\n    });\r\n  }\r\n\r\n  onSubmitCnicExpiry() {\r\n    this.spinner.show();\r\n    // const frmDt = new DatePipe('en-US').transform(this.ngForm.get('frmDt').value, 'dd-MM-yyyy')\r\n    // const toDt = new DatePipe('en-US').transform(this.ngForm.get('toDt').value, 'dd-MM-yyyy')\r\n    // let brnchSeq = this.ngForm.get('brnchSeq').value ? this.ngForm.get('brnchSeq').value : 0;\r\n    // let isXls = this.ngForm.get('isXls').value;\r\n    // console.log(isXls)\r\n    this.complianceService.printCnicExpiryReport().subscribe((response) => {\r\n      this.spinner.hide();\r\n      var binaryData = [];\r\n      binaryData.push(response);\r\n      var fileURL = window.URL.createObjectURL(new Blob(binaryData, { type: \"application/pdf\" }));\r\n      window.open(fileURL, '_blank');\r\n    }, (error) => {\r\n      this.spinner.hide();\r\n      if (error.status == 500) {\r\n        this.toaster.error(\"Something Went Wrong\", \"Error\");\r\n      } else if (error) {\r\n        this.toaster.error(\"Something Went Wrong\", \"Error\")\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AmlReportComponent } from './aml-report/aml-report.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSelectModule, MatDatepickerModule, MatNativeDateModule, MatRadioModule, MatAutocompleteModule, MatInputModule } from '@angular/material';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { CnicExpiryComponent } from './cnic-expiry/cnic-expiry.component';\r\n\r\n\r\nexport const routes: Routes = [\r\n  { path: '', redirectTo:'aml-matches' },\r\n  { path: 'aml-matches', component: AmlReportComponent },\r\n  { path: 'cnic-match', component: CnicExpiryComponent },\r\n  \r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule,\r\n    ReactiveFormsModule, MatSelectModule, MatDatepickerModule, MatNativeDateModule,MatRadioModule,\r\n    NgSelectModule, MatAutocompleteModule, MatInputModule, MatRadioModule\r\n  ],\r\n  declarations: [AmlReportComponent, CnicExpiryComponent]\r\n})\r\nexport class ComplianceRepotModule { }\r\n "],"sourceRoot":""}